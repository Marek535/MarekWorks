package pl.kurs.java.integration.model;

import lombok.Getter;
import lombok.Setter;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

@Setter
@getter
public class Crash {
private String nameOfDriver;
private String track;
private LocalDate date;
private int cost;
List listOfTeamInvolve = new ArrayList<>();

public Crash(String nameOfDriver, String track, LocalDate date, int cost) {
    this.nameOfDriver = nameOfDriver;
    this.track = track;
    this.date = date;
    this.cost = cost;
}

@Override
public String toString() {
    return "Crash{" +
            "nameOfDriver='" + nameOfDriver + '\'' +
            ", track='" + track + '\'' +
            ", date=" + date +
            ", cost=" + cost +
            ", listOfTeamInvolve=" + listOfTeamInvolve +
            '}';
}
}

package pl.kurs.java.integration.model;

import lombok.Getter;
import lombok.Setter;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

@getter
@Setter

public class Racewin {
private String track;
private String winner;
private LocalDate date;
private List listOfWinningTeam = new ArrayList<>();

public Racewin(String track, String winner, LocalDate date) {
    this.track = track;
    this.winner = winner;
    this.date = date;
}

@Override
public String toString() {
    return "Racewin{" +
            "track='" + track + '\'' +
            ", winner='" + winner + '\'' +
            ", date=" + date +
            '}';
}
}
package pl.kurs.java.integration.model;

import lombok.Getter;
import lombok.Setter;

import java.util.ArrayList;
import java.util.List;

@getter
@Setter

public class Team {
private String name;
private String car;
private int budget;
private List listOfWinningRace = new ArrayList<>();
private List listOfTeamCrash = new ArrayList<>();

public Team(String name, String car, int budget) {
    this.name = name;
    this.car = car;
    this.budget = budget;
}

@Override
public String toString() {
    return "Team{" +
            "name='" + name + '\'' +
            ", car='" + car + '\'' +
            ", budget=" + budget +
            ", listOfWinningRace=" + listOfWinningRace +
            '}';
}
public void addRaceWinning(Racewin racewin){
    listOfWinningRace.add(racewin);
    racewin.getListOfWinningTeam().add(this);

}
public void addCrash(Crash crash){
    listOfTeamCrash.add(crash);
    crash.getListOfTeamInvolve().add(this);
}
public int sumOfCrashCost(List<Crash> crashes){
    int sum=0;
    for (Crash x:crashes){
        sum+=x.getCost();
    }
    return sum;
}
}
package pl.kurs.java.service;
// klasy team (name, car, budget)
// racewin (track,winner,data)

import lombok.AllArgsConstructor;
import pl.kurs.java.integration.model.Crash;
import pl.kurs.java.integration.model.Racewin;
import pl.kurs.java.integration.model.Team;

import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

@AllArgsConstructor
//- znajda osobe ktora wygrała najwiecej wyścigów ok
// - znajda kierowce ktorego wartoscc wypadków jest najwzysza
// - znajda miasto w ktorym klienci kupili najwiecej produktow do poprawienia
// - znajda miasto w ktorym suma wartosci kupionych produktow przez mieszkancow tego miasta jest najwieksza.
// - znjadz produkt ktory zostal najwiwcej razy kupiony
// - kategorie produkto ktora byla najczesciej kupowana przez klientow-

public class FormulaService {
public static void main(String[] args) {

    List<Team> teams = new ArrayList<>();
    List<Racewin> racewins = new ArrayList<>();
    List<Crash> crashes = new ArrayList<>();

    Team Mercedes = new Team("Mercedes", "W11", 1000000);
    Team Mclaren = new Team("Mclaren", "PapayaOrange", 10000);
    Team Williams = new Team("Williams", "ItsNotEvenAcar", 100);
    Team RedBull = new Team("RedBull", "RB16B", 1000000);
    Team Ferrari = new Team("Ferrari", "RedSomething", 1000000);
    Team Haas = new Team("Haas", "HaasCar", 100);
    Team AlfaRomeo = new Team("AlfaRomeo", "Gulia", 1000);

    teams.add(Mercedes);
    teams.add(Mclaren);
    teams.add(Williams);
    teams.add(RedBull);
    teams.add(Ferrari);
    teams.add(Haas);
    teams.add(AlfaRomeo);

    Mercedes.addRaceWinning(new Racewin("Imola", "Hamilton", LocalDate.of(2021, 03, 02)));
    Mercedes.addRaceWinning(new Racewin("Monaco", "Hamilton", LocalDate.of(2021, 02, 10)));
    Mercedes.addRaceWinning(new Racewin("Australia", "Hamilton", LocalDate.of(2021, 01, 02)));
    Mercedes.addRaceWinning(new Racewin("Wietnam", "Hamilton", LocalDate.of(2021, 06, 02)));
    Mercedes.addRaceWinning(new Racewin("Spa", "Hamilton", LocalDate.of(2021, 03, 02)));
    RedBull.addRaceWinning(new Racewin("Holland", " Verstapen", LocalDate.of(2021, 10, 02)));
    RedBull.addRaceWinning(new Racewin("Singapur", " Verstapen", LocalDate.of(2021, 9, 02)));
    RedBull.addRaceWinning(new Racewin("Abu Dhabi", " Verstapen", LocalDate.of(2021, 11, 02)));
    RedBull.addRaceWinning(new Racewin("Hungary", " Verstapen", LocalDate.of(2021, 8, 02)));
    Mclaren.addRaceWinning(new Racewin("Muganello", "Norris", LocalDate.of(2021, 7, 15)));
    Ferrari.addRaceWinning(new Racewin("Great Britian", "Leclerc", LocalDate.of(2021, 4, 20)));

    Mercedes.addCrash(new Crash("Bottas", "Hungary", LocalDate.of(2021, 5, 10), 100000));
    Mercedes.addCrash(new Crash("Hamilton", "Monaco", LocalDate.of(2021, 02, 10), 5000));
    RedBull.addCrash(new Crash("Verstapen", "Great Britian", LocalDate.of(2021, 4, 20), 100000));
    Haas.addCrash(new Crash("Mazepin", "Great Britian", LocalDate.of(2021, 5, 10), 1000));
    Haas.addCrash(new Crash("Mazepin", "Hungary", LocalDate.of(2021, 5, 10), 5000));
    Haas.addCrash(new Crash("Mazepin", "Great Britian", LocalDate.of(2019, 5, 11), 10000));
    Haas.addCrash(new Crash("Mazepin", "Great Britian", LocalDate.of(2020, 5, 10), 30000));
    Haas.addCrash(new Crash("Mazepin", "Barcelona", LocalDate.of(2021, 5, 10), 30000));
    Haas.addCrash(new Crash("Mazepin", "Great Britian", LocalDate.of(2021, 5, 10), 10000));

    racewins.addAll(Mercedes.getListOfWinningRace());
    racewins.addAll(Mclaren.getListOfWinningRace());
    racewins.addAll(Williams.getListOfWinningRace());
    racewins.addAll(RedBull.getListOfWinningRace());
    racewins.addAll(Ferrari.getListOfWinningRace());
    racewins.addAll(Haas.getListOfWinningRace());
    racewins.addAll(AlfaRomeo.getListOfWinningRace());

    crashes.addAll(Mercedes.getListOfTeamCrash());
    crashes.addAll(Mclaren.getListOfTeamCrash());
    crashes.addAll(Williams.getListOfTeamCrash());
    crashes.addAll(RedBull.getListOfTeamCrash());
    crashes.addAll(Ferrari.getListOfTeamCrash());
    crashes.addAll(Haas.getListOfTeamCrash());
    crashes.addAll(AlfaRomeo.getListOfTeamCrash());

    System.out.println("Driver who won the most race " + driverWhoWonTheMostRace(racewins));

    System.out.println("Team who won the most race " + teamWhoWonTheMostRace(teams));

    System.out.println("Driver who made the most crash " +driverWhoHasMostCostCrash(crashes));

    System.out.println("Track with the most crash "+trackWithMostCrash(crashes));

    System.out.println("Driver with most expensive crash "+driverWithTheMostCostCrash(crashes));

}


private static String driverWhoWonTheMostRace(List<Racewin> racewins) {
    Map<String, Integer> mapOfWinAndRace = new HashMap<>();
    for (Racewin x : racewins) {
        if (!mapOfWinAndRace.containsKey(x.getWinner())) {
            mapOfWinAndRace.put(x.getWinner(), 1);
        }
        int tmp = mapOfWinAndRace.get(x.getWinner());
        mapOfWinAndRace.put(x.getWinner(), tmp + 1);
    }

    Map.Entry<String, Integer> entryMapWinRace = mapOfWinAndRace.entrySet().stream().max((k1, k2) -> k1.getValue() - k2.getValue()).get();
    return entryMapWinRace.getKey();
}

private static Team teamWhoWonTheMostRace(List<Team> teams) {
    return teams.stream().max((k1, k2) -> k1.getListOfWinningRace().size() - k2.getListOfWinningRace().size()).get();
}

private static String driverWhoHasMostCostCrash(List<Crash> crashes) {
    Map<String, Set<Integer>> driverAndHisCrash = new HashMap<>();
    for (Crash x:crashes){
        if (!driverAndHisCrash.containsKey(x.getNameOfDriver())){
            driverAndHisCrash.put(x.getNameOfDriver(),new HashSet<>());
        }
        driverAndHisCrash.get(x.getNameOfDriver()).add(x.getCost());
    }
    Map<String,List> driverCrash=new HashMap<>();
    for (Map.Entry<String, Set<Integer>> entry:driverAndHisCrash.entrySet()){
        driverCrash.put(entry.getKey(), entry.getValue().stream().collect(Collectors.toList()));
    }
    return driverCrash.entrySet().stream().max((k1,k2)->k1.getValue().size()-k2.getValue().size()).get().getKey();
}

private static String trackWithMostCrash(List<Crash>crashes){
    Map<String, Integer> mapOfTrackAndCrashOnIt = new HashMap<>();
    for (Crash x: crashes){
        if (!mapOfTrackAndCrashOnIt.containsKey(x.getTrack())){
            mapOfTrackAndCrashOnIt.put(x.getTrack(),1);
        }
        int tmp=mapOfTrackAndCrashOnIt.get(x.getTrack());
        mapOfTrackAndCrashOnIt.put(x.getTrack(),tmp+1);

    }

    Map.Entry<String,Integer> maxPar=mapOfTrackAndCrashOnIt.entrySet().stream().max((k1,k2)->k1.getValue()-k2.getValue()).get();
    return maxPar.getKey();
}
private static String driverWithTheMostCostCrash (List<Crash> crashes){
    Crash driverWithTheMostCostCrash = crashes.get(0);
    for (Crash x: crashes){
        if (x.getCost()>driverWithTheMostCostCrash.getCost()){
            driverWithTheMostCostCrash=x;
        }
    }
    return driverWithTheMostCostCrash.getNameOfDriver();
}
}
